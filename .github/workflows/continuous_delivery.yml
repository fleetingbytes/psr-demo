name: Continuous Delivery

on:
  push:
    branches:
      - master

# default: least privileged permissions across all jobs
permissions:
  contents: read

env:
  SEMANTIC_RELEASE_CONFIG_FILE: "./semantic-release.toml"


jobs:
  variables:
    name: Set Workflow Variables
    runs-on: ubuntu-latest
    outputs:
      semantic-release-config-file: ${{ steps.set-vars.outputs.semantic-release-config-file }}
    steps:
      - name: Set Variables
        id: set-vars
        run: echo "::set-output name=semantic-release-config-file::${SEMANTIC_RELEASE_CONFIG_FILE}"

jobs:
  build:
    name: Build
    needs: set-variables
    uses: ./.github/workflows/build.yml
    with:
      semantic-release-config-file: ${{ needs.variables.outputs.semantic-release-config-file }}
      distribution-artifacts-name: "dist"
      distribution-artifacts-dir: "dist"
      lock-file-artifact: "uv.lock"


  test-e2e:
    needs: build
    uses: ./.github/workflows/e2e-test.yml
    with:
      new-release-detected: ${{ needs.build.outputs.new-release-detected }}
      artifacts-name: ${{ needs.build.outputs.distribution-artifacts-name }}
      artifacts-dir: ${{ needs.build.outputs.distribution-artifacts-dir }}
      package-name: "psr-demo"
      distribution-file-incipit: "psr_demo"
      test-dependency-group: "test"
      run-test-command: "uv run -- pytest --verbose"


  release:
    needs:
      - variables
      - build
      - test-e2e
    uses: ./.github/workflows/release.yml
    with:
      new-release-detected: ${{ needs.build.outputs.new-release-detected }}
      semantic-release-config-file: ${{ needs.variables.outputs.semantic-release-config-file }}
      distribution-artifacts-name: ${{ needs.build.outputs.distribution-artifacts-name }}
      distribution-artifacts-dir: ${{ needs.build.outputs.distribution-artifacts-dir }}
      lock-file-artifact: ${{ needs.build.outputs.lock-file-artifact }}
    secrets: inherit


  # 1. Separate out the deploy step from the publish step to run each step at
  #    the least amount of token privilege
  # 2. Also, deployments can fail, and it is better to have a separate job if you need to retry
  #    and it won't require reversing the release.
  deploy-test:
    name: Release on TestPyPI
    needs: release
    runs-on: ubuntu-latest
    if: ${{ needs.release.outputs.released == 'true' }}

    environment:
      name: testpypi
      url: https://test.pypi.org/p/psr-demo

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Setup | Download Build Artifacts
        uses: actions/download-artifact@v4
        id: artifact-download
        with:
          name: ${{ needs.release.needs.build.outputs.distribution-artifacts-name }}
          path: ${{ needs.release.needs.build.outputs.distribution-artifacts-dir }}

      # see https://docs.pypi.org/trusted-publishers/
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          print-hash: true
          verbose: true
          repository-url: https://test.pypi.org/legacy/

  deploy:
    name: Release on PyPI
    needs: release
    runs-on: ubuntu-latest
    if: ${{ needs.release.outputs.released == 'true' }}

    environment:
      name: pypi
      url: https://pypi.org/p/psr-demo

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Setup | Download Build Artifacts
        uses: actions/download-artifact@v4
        id: artifact-download
        with:
          name: ${{ needs.release.needs.build.outputs.distribution-artifacts-name }}
          path: ${{ needs.release.needs.build.outputs.distribution-artifacts-dir }}

      # see https://docs.pypi.org/trusted-publishers/
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          print-hash: true
          verbose: true
