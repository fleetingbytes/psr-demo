name: Continuous Delivery

on:
  push:
    branches:
      - master

# default: least privileged permissions across all jobs
permissions:
  contents: read


jobs:
  build:
    name: Build
    uses: ./.github/workflows/build.yml
    with:
      semantic-release-config-file: "./semantic-release.toml"
      distribution-artifacts-name: "dist"
      distribution-artifacts-dir: "dist"
      lock-file-artifact: "uv.lock"


  test-e2e:
    needs: build
    uses: ./.github/workflows/e2e-test.yml
    with:
      new-release-detected: ${{ needs.build.outputs.new-release-detected }}
      artifacts-name: ${{ needs.build.outputs.distribution-artifacts-name }}
      artifacts-dir: ${{ needs.build.outputs.distribution-artifacts-dir }}
      package-name: "psr-demo"
      distribution-file-incipit: "psr_demo"
      test-dependency-group: "test"
      run-test-command: "uv run -- pytest --verbose"


  release:
    name: Release on GitHub
    runs-on: ubuntu-latest
    needs:
      - build
      - test-e2e

    if: ${{ needs.build.outputs.new-release-detected == 'true' }}

    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false

    permissions:
      contents: write

    steps:
      - name: Setup | Checkout Repository on Release Branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Setup | Force release branch to be at workflow sha
        run: git reset --hard ${{ github.sha }}

      - name: Setup | Install Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version-file: .python-version

      - name: Setup | Install uv
        uses: astral-sh/setup-uv@4959332f0f014c5280e7eac8b70c90cb574c9f9b  # v6.6.0

      - name: Setup | Install python-semantic-release
        env:
          UV_LOCKED: true
          UV_NO_MANAGED_PYTHON: true
        run: uv tool install python-semantic-release

      - name: Setup | Install Project
        env:
          UV_LOCKED: true
          UV_NO_MANAGED_PYTHON: true
        run: uv sync

      - name: Setup | Download Build Artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5.0.0
        id: artifact-download
        with:
          name: ${{ needs.build.outputs.distribution-artifacts-name }}
          path: ${{ needs.build.outputs.distribution-artifacts-dir }}

      - name: Setup | Download Lock File Artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0  # v5.0.0
        with:
          name: ${{ needs.build.outputs.lock-file-artifact }}

      - name: Setup | Stage Lock File for Version Commit
        run: git add uv.lock

      - name: Release | Create Release
        id: release
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          .github/workflows/verify-upstream-has-not-changed.sh
          uv run -- semantic-release -c ./semantic-release.toml -v --strict version --skip-build
          uv run -- semantic-release -c ./semantic-release.toml publish

    outputs:
      released: ${{ steps.release.outputs.released }}
      new-release-version: ${{ steps.release.outputs.version }}
      new-release-tag: ${{ steps.release.outputs.tag }}


  # 1. Separate out the deploy step from the publish step to run each step at
  #    the least amount of token privilege
  # 2. Also, deployments can fail, and it is better to have a separate job if you need to retry
  #    and it won't require reversing the release.
  deploy-test:
    name: Release on TestPyPI
    needs: release
    runs-on: ubuntu-latest
    if: ${{ needs.release.outputs.released == 'true' }}

    environment:
      name: testpypi
      url: https://test.pypi.org/p/psr-demo

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Setup | Download Build Artifacts
        uses: actions/download-artifact@v4
        id: artifact-download
        with:
          name: ${{ needs.release.needs.build.outputs.distribution-artifacts-name }}
          path: ${{ needs.release.needs.build.outputs.distribution-artifacts-dir }}

      # see https://docs.pypi.org/trusted-publishers/
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          print-hash: true
          verbose: true
          repository-url: https://test.pypi.org/legacy/

  deploy:
    name: Release on PyPI
    needs: release
    runs-on: ubuntu-latest
    if: ${{ needs.release.outputs.released == 'true' }}

    environment:
      name: pypi
      url: https://pypi.org/p/psr-demo

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Setup | Download Build Artifacts
        uses: actions/download-artifact@v4
        id: artifact-download
        with:
          name: ${{ needs.release.needs.build.outputs.distribution-artifacts-name }}
          path: ${{ needs.release.needs.build.outputs.distribution-artifacts-dir }}

      # see https://docs.pypi.org/trusted-publishers/
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          print-hash: true
          verbose: true
